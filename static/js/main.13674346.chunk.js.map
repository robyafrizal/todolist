{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionTypes.js","components/List/TextAndForm.js","components/List/List.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","addTodos","state","react_default","a","createElement","Fragment","className","onChange","type","placeholder","style","color","fontWeight","onClick","Component","connect","dispatch","todo","payload","addTodo","TextAndForm","buttonEditHandler","viewMode","buttonSaveHandler","editTodo","index","buttonCancelHandler","buttonDeleteHandler","deleteTodo","buttonEdit","List","todos","map","key","List_TextAndForm","initialState","store","createStore","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","newTodos","filter","App","es","Segment","inverted","vertical","textAlign","Container","as","Header","Menu","borderless","compact","Item","active","components_Form_Form","components_List_List","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13674346.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addTodo } from \"../../store/actions/todoAction\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\"\n    };\n  }\n\n  onChangeHandler = e => {\n    this.setState({ text: e.target.value });\n  };\n\n  onSubmit = () => {\n    this.props.addTodos(this.state.text);\n    this.setState({ text: \"\" });\n  };\n\n  render() {\n    return (\n      <>\n        <p>Add Todo</p>\n        <div className=\"form-group\">\n          <input\n            value={this.state.text}\n            onChange={this.onChangeHandler}\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter To Do List\"\n            style={{ color: \"brown\", fontWeight: \"600\" }}\n          />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">\n          Add\n        </button>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodos: todo => dispatch(addTodo(todo))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const addTodo = todo => ({\n  type: actionTypes.ADD_TODOS,\n  payload: todo\n});\n\nexport const editTodo = payload => ({\n  type: actionTypes.EDIT_TODO,\n  payload: payload\n});\n\nexport const deleteTodo = index => ({\n  type: actionTypes.DELETE_TODO,\n  payload: index\n});\n","export const ADD_TODOS = \"ADD_TODOS\";\nexport const EDIT_TODO = \"EDIT_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { editTodo, deleteTodo } from \"../../store/actions/todoAction\";\n\nclass TextAndForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewMode: \"show\",\n      text: props.todo\n    };\n  }\n  buttonEditHandler = () => {\n    this.setState({ viewMode: \"edit\" });\n  };\n  buttonSaveHandler = () => {\n    this.props.editTodo(this.props.index, this.state.text);\n    this.setState({ viewMode: \"show\" });\n  };\n  buttonCancelHandler = () => {\n    this.setState({ viewMode: \"show\" });\n  };\n  buttonDeleteHandler = () => {\n    this.props.deleteTodo(this.props.index);\n  };\n\n  onChangeHandler = e => {\n    this.setState({ text: e.target.value });\n  };\n\n  render() {\n    let todo = <p>{this.props.todo}</p>; //element text todo\n    let buttonEdit = (\n      <button className=\"btn btn-primary\" onClick={this.buttonEditHandler}>\n        Edit\n      </button>\n    );\n\n    //jika viewMode berubah jadi 'edit'\n    if (this.state.viewMode === \"edit\") {\n      //element text todo akan menjadi form input\n      todo = (\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          value={this.state.text}\n          onChange={this.onChangeHandler}\n        />\n      );\n      buttonEdit = (\n        <div>\n          <button className=\"btn btn-success\" onClick={this.buttonSaveHandler}>\n            Save\n          </button>\n          <button\n            className=\"btn btn-warning\"\n            onClick={this.buttonCancelHandler}\n          >\n            Cancel\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"row\">\n        <div className=\"col-8\">{todo}</div>\n        <div className=\"col-4\">\n          {buttonEdit}\n          <button className=\"btn btn-danger\" onClick={this.buttonDeleteHandler}>\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    editTodo: (index, todo) => dispatch(editTodo({ index, todo })),\n    deleteTodo: index => dispatch(deleteTodo(index))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TextAndForm);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport TextAndForm from \"./TextAndForm\";\n\nclass List extends Component {\n  render() {\n    return (\n      <ul className=\"list-group\">\n        {this.props.todos.map((todo, index) => (\n          <li key={index} className=\"list-group-item\" style={{ color: \"red\" }}>\n            <TextAndForm todo={todo} index={index} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nexport default connect(mapStateToProps, null)(List);\n","import { createStore } from \"redux\";\n\nimport * as actionTypes from \"./actions/actionTypes\";\n\nconst initialState = {\n  todos: []\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case actionTypes.DELETE_TODO:\n      let newTodos = state.todos.filter((e, index) => index !== action.payload); //hapus elemen array dg filter\n\n      //   let newTodos = [...state.todos]; //copy state todos\n      //   newTodos.splice(action.payload.index, 1); //hapus elemen array dg splice\n\n      return {\n        ...state,\n        todos: newTodos\n      }; //return state baru\n    case actionTypes.EDIT_TODO: //edit state\n      let todos = [...state.todos]; //copy state todos\n      //ganti data todo\n      let index = action.payload.index;\n      let todo = action.payload.todo;\n      todos[index] = todo;\n\n      //return state baru\n      return {\n        ...state,\n        todos\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { Container, Header, Menu, Segment } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport \"./App.css\";\nimport Form from \"./components/Form/Form\";\nimport List from \"./components/List/List\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App container\">\n          <Segment inverted vertical textAlign=\"center\">\n            <Container as=\"nav\">\n              <Header inverted as=\"h1\">\n                Roby Afrizal Palmendha\n              </Header>\n              <Menu borderless compact inverted>\n                <Menu.Item active>To Do List with Redux</Menu.Item>\n              </Menu>\n            </Container>\n            <Container className=\"content\">\n              <Header inverted as=\"h1\">\n                Learn React Redux\n              </Header>\n              <p>Redux within application To Do List</p>\n              <br />\n              <Form />\n              <List />\n            </Container>\n            <Segment inverted vertical as=\"footer\">\n              built with passion - by{\" \"}\n              <a href=\"https://robyafrizalpalmendha.github.io\">\n                Roby Afrizal Palmendha\n              </a>\n            </Segment>\n          </Segment>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}